CREATE OR REPLACE FUNCTION FC_GET_FLIGHT_SIMULATIONS
  (L_ID_PROJECT IN INTEGER)
RETURN SYS_REFCURSOR
IS
  C1 SYS_REFCURSOR;
BEGIN
  OPEN C1 FOR
  SELECT  FS.ID_FLIGHT_SIMULATION, FI.DESIGNATOR, FS.SCHEDULED_ARRIVAL,
          FS.DEPARTURE_DATE, FS.EFFECTIVE_CREW, FS.EFFECTIVE_CARGO,
          FS.EFFECTIVE_FUEL
  FROM  FLIGHT_SIMULATION FS, FLIGHT_INFO FI
  WHERE FS.ID_FLIGHT_INFO = FI.ID_FLIGHT_INFO
    AND FS.ID_PROJECT = L_ID_PROJECT;

  RETURN C1;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION FC_GET_FLIGHT_SIMULATION
  (L_ID_PROJECT IN INTEGER, L_ID_FLIGHT_SIMULATION IN INTEGER)
RETURN SYS_REFCURSOR
IS
  C1 SYS_REFCURSOR;
BEGIN
  OPEN C1 FOR
  SELECT  FS.ID_FLIGHT_SIMULATION, FI.DESIGNATOR, FS.SCHEDULED_ARRIVAL,
          FS.DEPARTURE_DATE, FS.EFFECTIVE_CREW, FS.EFFECTIVE_CARGO,
          FS.EFFECTIVE_FUEL
  FROM  FLIGHT_SIMULATION FS, FLIGHT_INFO FI
  WHERE FS.ID_FLIGHT_INFO = FI.ID_FLIGHT_INFO
    AND FS.ID_PROJECT = L_ID_PROJECT
    AND FS.ID_FLIGHT_SIMULATION = L_ID_FLIGHT_SIMULATION;

  RETURN C1;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION FC_GET_AIRCRAFT_CLASS
  (L_ID_FLIGHT_SIMULATION IN INTEGER)
RETURN SYS_REFCURSOR
IS
  C1 SYS_REFCURSOR;
BEGIN
  OPEN C1 FOR
  SELECT  NUMBER_PASSENGERS
  FROM  AIRCRAFT_CLASS
  WHERE ID_FLIGHT_SIMULATION = L_ID_FLIGHT_SIMULATION;

  RETURN C1;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION FC_GET_FLIGHT_PLAN
  (L_ID_FLIGHT_SIMULATION IN INTEGER)
RETURN SYS_REFCURSOR
IS
  C1 SYS_REFCURSOR;
BEGIN
  OPEN C1 FOR
  SELECT  S.SEGMENT_CODE, FP.SEGMENT_ORDER
  FROM  FLIGHT_PLAN FP, SEGMENT S
  WHERE FP.ID_SEGMENT = S.ID_SEGMENT
    AND FP.ID_FLIGHT_SIMULATION = L_ID_FLIGHT_SIMULATION;

  RETURN C1;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

--------------------------------------------------------------------------------

create or replace PROCEDURE PC_ADD_FLIGHT_SIMULATION
  (L_ID_FLIGHT_SIMULATION OUT INTEGER,
  L_ID_PROJECT IN INTEGER,
  L_DESIGNATOR IN VARCHAR,
  L_SCHEDULED_ARRIVAL IN DATE,
  L_DEPARTURE_DATE IN DATE,
  L_EFFECTIVE_CREW IN INTEGER,
  L_EFFECTIVE_CARGO IN DOUBLE PRECISION,
  L_EFFECTIVE_FUEL IN DOUBLE PRECISION)
IS
  L_ID_FLIGHT_INFO INTEGER;
BEGIN
  -- Gets the id_flight_info
  SELECT ID_FLIGHT_INFO INTO L_ID_FLIGHT_INFO FROM FLIGHT_INFO
  WHERE DESIGNATOR = L_DESIGNATOR AND ID_PROJECT = L_ID_PROJECT;
  
  INSERT INTO FLIGHT_SIMULATION
  (ID_FLIGHT_INFO, SCHEDULED_ARRIVAL, DEPARTURE_DATE,
  EFFECTIVE_CREW, EFFECTIVE_CARGO, EFFECTIVE_FUEL, ID_PROJECT)
  VALUES
  (L_ID_FLIGHT_INFO, L_SCHEDULED_ARRIVAL, L_DEPARTURE_DATE,
  L_EFFECTIVE_CREW, L_EFFECTIVE_CARGO, L_EFFECTIVE_FUEL, L_ID_PROJECT)
  RETURNING ID_FLIGHT_SIMULATION INTO L_ID_FLIGHT_SIMULATION;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

--------------------------------------------------------------------------------

create or replace PROCEDURE PC_ADD_AIRCRAFT_CLASS
  (L_ID_FLIGHT_SIMULATION IN INTEGER,
  L_NUMBER_PASSENGERS IN INTEGER)
IS
BEGIN
  INSERT INTO AIRCRAFT_CLASS (ID_FLIGHT_SIMULATION, NUMBER_PASSENGERS)
  VALUES (L_ID_FLIGHT_SIMULATION, L_NUMBER_PASSENGERS);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

--------------------------------------------------------------------------------

create or replace PROCEDURE PC_ADD_FLIGHT_PLAN
  (L_ID_PROJECT IN INTEGER,
  L_ID_FLIGHT_SIMULATION IN INTEGER,
  L_SEGMENT_CODE IN VARCHAR,
  L_SEGMENT_ORDER IN INTEGER)
IS
  L_ID_SEGMENT INTEGER;
BEGIN
  SELECT ID_SEGMENT INTO L_ID_SEGMENT FROM SEGMENT
  WHERE SEGMENT_CODE = L_SEGMENT_CODE AND ID_PROJECT = L_ID_PROJECT;
  
  INSERT INTO FLIGHT_PLAN (ID_SEGMENT, ID_FLIGHT_SIMULATION, SEGMENT_ORDER)
  VALUES (L_ID_SEGMENT, L_ID_FLIGHT_SIMULATION, L_SEGMENT_ORDER);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/