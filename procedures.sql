-- Authors
--
-- Daniel Gonçalves - 1151452
-- Eric Amaral - 1141570
-- Ivo Ferro - 1151159
-- Tiago Correia - 1151031

-- Procedure that creates an aircraft model into a given project
CREATE OR REPLACE PROCEDURE PC_CREATE_AIRCRAFT_MODEL
  (L_ID_PROJECT IN INTEGER, -- project to be inserted in
  L_MODEL_NAME IN VARCHAR,
  L_DESCRIPTION IN VARCHAR,
  L_MAKER IN VARCHAR,
  L_AIRCRAFT_TYPE IN VARCHAR,
  L_MOTOR IN VARCHAR,
  L_NUMBER_MOTORS IN INTEGER,
  L_MOTOR_TYPE IN VARCHAR,
  L_CRUISE_ALTITUDE IN DOUBLE PRECISION,
  L_CRUISE_SPEED IN DOUBLE PRECISION,
  L_TSFC IN DOUBLE PRECISION,
  L_LAPSE_RATE_FACTOR IN DOUBLE PRECISION,
  L_THRUST_0 IN DOUBLE PRECISION,
  L_THRUST_MAX_SPEED IN DOUBLE PRECISION,
  L_MAX_SPEED IN DOUBLE PRECISION,
  L_EMPTY_WEIGHT IN DOUBLE PRECISION,
  L_MTOW IN DOUBLE PRECISION,
  L_MAX_PAYLOAD IN DOUBLE PRECISION,
  L_FUEL_CAPACITY IN DOUBLE PRECISION,
  L_VMO IN DOUBLE PRECISION,
  L_MMO IN DOUBLE PRECISION,
  L_WING_AREA IN DOUBLE PRECISION,
  L_WING_SPAN IN DOUBLE PRECISION,
  L_ASPECT_RATIO IN DOUBLE PRECISION,
  L_E IN DOUBLE PRECISION,
  L_ID_AIRCRAFT_MODEL OUT INTEGER)
IS
  L_ID_THRUST_FUNCTION INTEGER;
  L_ID_MOTORIZATION INTEGER;
BEGIN
  -- Insert thrust function
  INSERT INTO THRUST_FUNCTION (THRUST_0, THRUST_MAX_SPEED, MAX_SPEED)
  VALUES (L_THRUST_0, L_THRUST_MAX_SPEED, L_MAX_SPEED)
  RETURNING ID_THRUST_FUNCTION
  INTO L_ID_THRUST_FUNCTION;
  
  -- Insert motorization
  INSERT INTO MOTORIZATION
  (MOTOR, NUMBER_MOTORS, MOTOR_TYPE, CRUISE_ALTITUDE, CRUISE_SPEED,
  TSFC, LAPSE_RATE_FACTOR, ID_THRUST_FUNCTION)
  VALUES
  (L_MOTOR, L_NUMBER_MOTORS, L_MOTOR_TYPE, L_CRUISE_ALTITUDE, L_CRUISE_SPEED,
  L_TSFC, L_LAPSE_RATE_FACTOR, L_ID_THRUST_FUNCTION)
  RETURNING ID_MOTORIZATION
  INTO L_ID_MOTORIZATION;
  
  -- Insert aircraft model
  INSERT INTO AIRCRAFT_MODEL
  (ID_PROJECT, MODEL_NAME, DESCRIPTION, MAKER, AIRCRAFT_TYPE, 
  ID_MOTORIZATION, EMPTY_WEIGHT, MTOW, MAX_PAYLOAD, FUEL_CAPACITY, VMO, MMO, WING_AREA, 
  WING_SPAN, ASPECT_RATIO, E)
  VALUES
  (L_ID_PROJECT, L_MODEL_NAME, L_DESCRIPTION, L_MAKER, L_AIRCRAFT_TYPE, 
  L_ID_MOTORIZATION, L_EMPTY_WEIGHT, L_MTOW, L_MAX_PAYLOAD, L_FUEL_CAPACITY, L_VMO, L_MMO,
  L_WING_AREA, L_WING_SPAN, L_ASPECT_RATIO, L_E)
  RETURNING ID_AIRCRAFT_MODEL
  INTO L_ID_AIRCRAFT_MODEL;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

-- Procedure that creates a cdrag function
CREATE OR REPLACE PROCEDURE PC_CREATE_CDRAG_FUNCTION
  (L_CDRAG_0 IN DOUBLE PRECISION,
  L_SPEED IN DOUBLE PRECISION,
  L_ID_AIRCRAFT_MODEL IN INTEGER)
IS
BEGIN
  INSERT INTO CDRAG_FUNCTION (CDRAG_0, SPEED, ID_AIRCRAFT_MODEL)
  VALUES (L_CDRAG_0, L_SPEED, L_ID_AIRCRAFT_MODEL);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

-- Procedure that creates an empty project
CREATE OR REPLACE PROCEDURE PC_CREATE_EMPTY_PROJECT
  (L_ID_PROJECT OUT INTEGER, L_NAME OUT VARCHAR, L_DESCRIPTION OUT VARCHAR) IS
BEGIN
  INSERT INTO PROJECT (NAME, DESCRIPTION)
  VALUES ('Empty project', 'This is an empty project')
  RETURNING ID_PROJECT, NAME, DESCRIPTION
  INTO L_ID_PROJECT, L_NAME, L_DESCRIPTION;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

-- Procedure that deletes a project
CREATE OR REPLACE PROCEDURE PC_DELETE_PROJECT (L_ID_PROJECT IN INTEGER) IS
BEGIN
  DELETE FROM PROJECT WHERE ID_PROJECT = L_ID_PROJECT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

-- Procedure that edits a project name and description
CREATE OR REPLACE PROCEDURE PC_EDIT_PROJECT_N_D
  (L_ID_PROJECT IN INTEGER, L_NEW_NAME IN VARCHAR, L_NEW_DESCRIPTION IN VARCHAR)
IS
BEGIN
  UPDATE PROJECT
  SET NAME = L_NEW_NAME, DESCRIPTION = L_NEW_DESCRIPTION
  WHERE ID_PROJECT = L_ID_PROJECT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/ 

-- procedure to create an airport into a given project
CREATE OR REPLACE PROCEDURE PC_CREATE_AIRPORT
  (L_IATA IN CHAR,
   L_NAME IN VARCHAR,
   L_TOWN IN VARCHAR,
   L_COUNTRY IN VARCHAR,
   L_ALTITUDE IN DOUBLE PRECISION,
   L_COORDINATE_CODE IN VARCHAR,
   L_ID_PROJECT IN INTEGER)
IS
  L_ID_COORDINATE INTEGER;
BEGIN
  SELECT ID_COORDINATE 
  INTO L_ID_COORDINATE
  FROM COORDINATE
  WHERE COORDINATE_CODE = L_COORDINATE_CODE
  AND ID_PROJECT = L_ID_PROJECT;

  INSERT INTO AIRPORT
  (IATA, NAME, TOWN, COUNTRY, ALTITUDE, ID_COORDINATE, ID_PROJECT) 
  VALUES
  (L_IATA, L_NAME, L_TOWN, L_COUNTRY, L_ALTITUDE, L_ID_COORDINATE, L_ID_PROJECT);

EXCEPTION
 WHEN NO_DATA_FOUND THEN
   DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
 WHEN TOO_MANY_ROWS THEN
   DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
 WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/

-- procedure to create a segment into a given project
CREATE OR REPLACE PROCEDURE PC_ADD_SEGMENT
  (L_SEGMENT_CODE IN VARCHAR,
   L_WIND_DIRECTION IN FLOAT,
   L_WIND_INTENSITY IN FLOAT,
   L_ALTITUDE IN FLOAT,
   L_ID_PROJECT IN NUMBER,
   L_ORIGIN_COORDINATE IN VARCHAR,
   L_DEST_COORDINATE IN VARCHAR)
IS
L_ID_ORIGIN INTEGER;
L_ID_DEST INTEGER;
BEGIN
SELECT ID_COORDINATE 
  INTO L_ID_ORIGIN
  FROM COORDINATE
  WHERE COORDINATE_CODE = L_ORIGIN_COORDINATE
  AND ID_PROJECT = L_ID_PROJECT;
 
 SELECT ID_COORDINATE 
  INTO L_ID_DEST
  FROM COORDINATE
  WHERE COORDINATE_CODE = L_DEST_COORDINATE
  AND ID_PROJECT = L_ID_PROJECT;
  
  INSERT INTO SEGMENT
  (SEGMENT_CODE, WIND_DIRECTION, WIND_INTENSITY, ALTITUDE, ID_PROJECT, ORIGIN_COORDINATE, DEST_COORDINATE)
  VALUES
  (L_SEGMENT_CODE, L_WIND_DIRECTION, L_WIND_INTENSITY, L_ALTITUDE, L_ID_PROJECT, L_ID_ORIGIN, L_ID_DEST);

EXCEPTION
 WHEN NO_DATA_FOUND THEN
   DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
 WHEN TOO_MANY_ROWS THEN
   DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
 WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/


-- procedure to create a coordinate into a given project
CREATE OR REPLACE PROCEDURE PC_ADD_COORDINATE
  (L_COORDINATE_CODE IN VARCHAR,
   L_LATITUDE IN VARCHAR,
   L_LONGITUDE IN VARCHAR,
   L_ID_PROJECT IN NUMBER)
IS
BEGIN
  INSERT INTO COORDINATE
  (COORDINATE_CODE, LATITUDE, LONGITUDE, ID_PROJECT)
  VALUES
  (L_COORDINATE_CODE, L_LATITUDE, L_LONGITUDE, L_ID_PROJECT);

EXCEPTION
 WHEN NO_DATA_FOUND THEN
   DBMS_OUTPUT.PUT_LINE('There was no data found'||SYSDATE);
 WHEN TOO_MANY_ROWS THEN
   DBMS_OUTPUT.PUT_LINE('Too many rows'||SYSDATE);
 WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('An error occured'||SYSDATE);
END;
/